package kr.or.ddit.controller.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.dto.ClassVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.service.TclassService;

@Controller
@RequestMapping("/tclass")
public class TClassController {
	
	@Autowired
	private TclassService tclassService;

	@RequestMapping("/list")
	public String list(kr.or.ddit.command.SearchCriteria cri,HttpServletRequest request, Model model) throws Exception{
		String url = "tclass/list";
		
		String keyword2 = request.getParameter("keyword2");
		
		HttpSession session=request.getSession();
		MemberVO member=(MemberVO)session.getAttribute("loginUser");
		String id=member.getId();
		
		System.out.println("--------------------");
		System.out.println("로그인한 id : "+id);
		
		SearchCriteria cri2 = new SearchCriteria();
		
		cri2.setKeyword(keyword2);
		
		Map<String, Object> dataMap = tclassService.classList(cri);
		Map<String, Object> dataMap2 = tclassService.unregisteredClassList(cri2);
		
		List<ClassVO> classVOList = (List<ClassVO>) dataMap.get("classList");
		List<ClassVO> classVOList2 = (List<ClassVO>) dataMap2.get("unregisteredClassList");
		List<ClassVO> test22 = new ArrayList<ClassVO>();
		List<ClassVO> test33 = new ArrayList<ClassVO>();
		
//		List<Integer>numList=new ArrayList<>();
		
		
		//수업계획서 등록된것들 중 로그인한 id랑 다른 수업목록 제거
		if(classVOList.size()>0 && classVOList!=null) {
			for(int i=0; i<classVOList.size(); i++) {
//				System.out.println("classVOList size : " + classVOList.size());
//				System.out.println("for문 돌려서 얻은 id : "+classVOList.get(i).getId());
				if(id.equals(classVOList.get(i).getId())) {
					test22.add(classVOList.get(i));
				}
			}
		}
		System.out.println("test22: "+test22);
		dataMap.put("classList", test22);
		
		//수업계획서 미등록된것들 중 로그인한 id랑 다른 수업목록 제거
		if(classVOList2.size()>0 && classVOList2!=null) {
			for(int i=0; i<classVOList2.size(); i++) {
				System.out.println("for문 돌려서 얻은 id : "+classVOList2.get(i).getId());
				if(id.equals(classVOList2.get(i).getId())) {
					test33.add(classVOList2.get(i));
				}
				
			}
		}
		System.out.println("test33: "+test33);
		dataMap2.put("unregisteredClassList", test33);
		
//		if(numList2.size()>0 && numList2!=null) {
//			for(int i=numList2.size()-1; i>=0; i--) {
//				System.out.println(numList2.get(i));
//				classVOList2.remove(numList2.get(i));
//			}
//			
//		}
		
		
		model.addAttribute("dataMap",dataMap);
		model.addAttribute("dataMap2",dataMap2);
		model.addAttribute("keyword2",keyword2);
		
		return url;
	}
	
	@ResponseBody
	@RequestMapping(value="/searchList",method=RequestMethod.GET)
	public ResponseEntity<Map<String,Object>> searchList(@RequestParam Map<String,Object> map){
		ResponseEntity<Map<String,Object>> entity = null;
		String key = (String)map.get("keyword");
		SearchCriteria cri = new SearchCriteria();
		cri.setKeyword(key);
		System.out.println("controller1에서 key1:"+key);
		
		Map<String,Object> dataMap = new HashMap<String,Object>();
		
		try {
			dataMap = tclassService.classList(cri);
			entity = new ResponseEntity<Map<String,Object>>(dataMap,HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String,Object>>(dataMap,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	@ResponseBody
	@RequestMapping(value="/searchList2",method=RequestMethod.GET)
	public ResponseEntity<Map<String,Object>> searchList2(@RequestParam Map<String,Object> map){
		ResponseEntity<Map<String,Object>> entity = null;
		
		String key2 = (String)map.get("keyword");
		SearchCriteria cri = new SearchCriteria();
		cri.setKeyword(key2);
		System.out.println("controller2에서 key2:"+key2);
		
		Map<String,Object> dataMap = new HashMap<String,Object>();
		try {
			dataMap = tclassService.unregisteredClassList(cri);
			entity = new ResponseEntity<Map<String,Object>>(dataMap,HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String,Object>>(dataMap,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	@ResponseBody
	@RequestMapping(value="/unregiClass",method=RequestMethod.GET)
	public ResponseEntity<Map<String,Object>> unregiClass(@RequestParam Map<String,Object> map){
		ResponseEntity<Map<String,Object>> entity = null;
		
		String strClassCode = (String)map.get("classCode");
		int classCode = Integer.parseInt(strClassCode);
		System.out.println("classCode : "+classCode);
		
		Map<String, Object> ctMap = new HashMap<String, Object>();
		try {
			ctMap = tclassService.selectUnregisteredClassForModal(classCode);
			entity = new ResponseEntity<Map<String,Object>>(ctMap,HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String,Object>>(ctMap,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	@ResponseBody
	@RequestMapping(value="/regiClass",method=RequestMethod.GET)
	public ResponseEntity<Map<String,Object>> regiClass(@RequestParam Map<String,Object> map){
		ResponseEntity<Map<String,Object>> entity = null;
		
		String strClassCode = (String)map.get("classCode");
		int classCode = Integer.parseInt(strClassCode);
		System.out.println("classCode : "+classCode);
		
		Map<String, Object> ctMap = new HashMap<String, Object>();
		try {
			ctMap = tclassService.selectRegisteredClassForModal(classCode);
			entity = new ResponseEntity<Map<String,Object>>(ctMap,HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String,Object>>(ctMap,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	
	
	
	@RequestMapping("/review")
	public String review(kr.or.ddit.command.SearchCriteria cri, Model model) throws Exception{
		String url = "tclass/review";

		return url;
	}
	
	@RequestMapping("/star")
	public String star(kr.or.ddit.command.SearchCriteria cri, Model model) throws Exception{
		String url = "tclass/rater-js-master/rater-js-master/example/index";

		return url;
	}
	
	
}
