package kr.or.ddit.dao;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSession;

import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.dto.CertificateVO;
import kr.or.ddit.dto.ClassVO;
import kr.or.ddit.dto.ClassingVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.dto.SubjectVO;
import kr.or.ddit.dto.TimeDetailVO;
import kr.or.ddit.dto.UseRoomVO;

public class ClassDAOImpl implements ClassDAO {

	private SqlSession session;
	public void setSession(SqlSession session) {
		this.session = session;
	}
	/**
	 * 페이지네이션이 가능한 수업 목록을 불러오는 메서드 
	 */
	@Override
	public List<ClassVO> selectSearchClassList(SearchCriteria cri) throws SQLException {
		cri.setPerPageNum(5);
		int offset=cri.getStartRowNum();
		int limit=cri.getPerPageNum();		
		RowBounds rowBounds=new RowBounds(offset,limit);

		List<ClassVO> classList = session.selectList("Class-Mapper.selectSearchClassList", cri, rowBounds);

		return classList;
	}
	/**
	 * 모든 수업 리스트
	 */
	@Override
	public List<ClassVO> getAllClass(Map<String, Object> dataParam) throws SQLException {
		List<ClassVO> classList = session.selectList("Class-Mapper.getAllClass", dataParam);
		return classList;
	}

	/**
	 * 리스트 전체 개수를 가져온다.
	 */
	@Override
	public int selectSearchClassListCount(SearchCriteria cri) throws SQLException {
		return session.selectOne("Class-Mapper.selectSearchClassListCount",cri);
	}
	
	/**
	 * 과목영역 정보 리스트를 불러온다
	 */
	@Override
	public List<SubjectVO> getSubDetail(int subcode) throws SQLException {
		return session.selectList("Class-Mapper.getSubDetail", subcode);
	}

	/**
	 * 수업 상세 정보를 불러온다.
	 */
	@Override
	public ClassVO getClassDetail(int class_code) throws SQLException {
		return session.selectOne("Class-Mapper.getClassDetail", class_code);
	}

	@Override
	public int getClassCode() throws SQLException {
		return session.selectOne("Class-Mapper.getClassCode");
	}

	@Override
	public int registClass(ClassVO classVO) throws SQLException {
		return session.update("Class-Mapper.registClass", classVO);
	}

	@Override
	public void removeClass(ClassVO classVO) throws SQLException {
		session.update("Class-Mapper.removeClass", classVO);
	}

	/**
	 * 과목명에 맞는 강사 리스트를 불러온다
	 * @param subjectName 과목명에 맞는 강사 리스트를 불러오기 위해 과목명을 넣어줌
	 * @throws SQLException
	 */
	@Override
	public List<MemberVO> getTeacherList(String subjectName) throws SQLException {
		return session.selectList("Class-Mapper.getTeacherList", subjectName);
	}
	/**
	 * id에 맞는 강사 상세 정보
	 */
	@Override
	public MemberVO getTeacherById(String id) throws SQLException {
		return session.selectOne("Class-Mapper.getTeacherById", id);
	}
	/**
	 * 아이디에 맞는 자격증리스트
	 */
	@Override
	public List<CertificateVO> getCertificateList(String id) throws SQLException {
		return session.selectList("Class-Mapper.getCertificate", id);
	}


	@Override
	public List<ClassingVO> getClassing(String id) throws SQLException {
		
		return session.selectList("Class-Mapper.getClassing", id);
	}

	/**
 	 * 사용중인 강의실 리스트를 불러온다
 	 * 사용시간, 사용기간 등
	 */
	@Override
	public List<UseRoomVO> getUseRoomList(String roomCode) throws SQLException {
		return session.selectList("Class-Mapper.getUseRoomTime", roomCode);
	}

	/**
	 * 수업을 개설한다
	 */
	@Override
	public int updateClassOpen(ClassVO classVO) throws SQLException {
		return session.update("Class-Mapper.updateClassOpen", classVO);
	}

	@Override
	public int getTimedetailSeq() throws SQLException {
		return session.selectOne("Class-Mapper.getTimedetailSeq");
	}

	@Override
	public int registTimeDetail(TimeDetailVO timeDetailVO) throws SQLException {
		return session.update("Class-Mapper.registTimeDetail", timeDetailVO);
	}
	@Override
	public List<ClassVO> selectSearchClassListInClassList(SearchCriteria cri) throws SQLException {
		cri.setPerPageNum(5);
		int offset=cri.getStartRowNum();
		int limit=cri.getPerPageNum();		
		RowBounds rowBounds=new RowBounds(offset,limit);

		List<ClassVO> classList = session.selectList("Class-Mapper.selectSearchClassListInClassList", cri, rowBounds);

		return classList;
	}
	//수업을 수강중인 학생 id리스트
	@Override
	public List<ClassingVO> selectClassIngMemberList(String classCode) throws SQLException {
		return session.selectList("Class-Mapper.selectClassIngMemberList", classCode);
	}
	@Override
	public List<TimeDetailVO> selectClassTimeDetail(String classCode) throws SQLException {
		return session.selectList("Class-Mapper.selectClassTimeDetail", classCode);
	}
	@Override
	public MemberVO selectSchoolDetail(String id) throws SQLException {
		return session.selectOne("Class-Mapper.selectSchoolDetail", id);
	}



}
