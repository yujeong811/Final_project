package kr.or.ddit.controller.view;

import java.io.File;
import java.sql.SQLException;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.service.MemberService;

@Controller
@RequestMapping("/exam")
public class ExamController {
   
   @Autowired
   private MemberService memberService;
   
//   @Autowired
//   private ExceptionLoggerHelper exceptionLogger;
   
   @RequestMapping("/main")
   public void main() {}
   
//   @RequestMapping("/list")
//   public ModelAndView list(SearchCriteria cri,HttpServletRequest request, ModelAndView mnv) throws SQLException{
//      String url = "member/list";
//      
//      Map<String, Object> dataMap = null;
//      
//      try {
//         dataMap = memberService.getMemberListForPage(cri);
//         
////         if(true) throw new SQLException();
//         
//      } 
////      catch (SQLException e) {
////    	  exceptionLogger.write(request, e, "MemberService");
////    	  e.printStackTrace();
////         throw e;
////      }
//      catch (Exception e) {
//         e.printStackTrace();
//      }
//      
//      mnv.addObject("dataMap", dataMap);
//      mnv.setViewName(url);
//      
//      return mnv;
//   }
   
//   @RequestMapping(value = "/registForm", method = RequestMethod.GET)
//   public String registForm() {
//      String url = "member/regist";
//      return url;
//   }
//	
//	@RequestMapping(value="/regist", method=RequestMethod.POST)
//	public String regist(MemberRegistCommand memberReq) throws Exception{
//		String url = "member/regist_success";
//		
//		MemberVO member = memberReq.toMemberVO();
//		memberService.regist(member);
//		
//		return url;
//	}
//	
//	@RequestMapping(value = "/detail", method = RequestMethod.GET)
//	public String detail(String id, Model model) throws Exception{
//		String url = "member/detail";
//		
//		MemberVO member = memberService.getMember(id);
//		model.addAttribute("member", member);
//		
//		return url;
//	}
//	
//	@RequestMapping(value = "/modifyForm", method = RequestMethod.GET)
//	public String modifyForm(String id, Model model) throws Exception{
//		String url = "member/modify";
//		
//		MemberVO member = memberService.getMember(id);
//		
//		String picture = MakeFileName.parseFileNameFromUUID(member.getPicture(), "\\$\\$");
//		member.setPicture(picture);
//		
//		model.addAttribute("member", member);
//		
//		return url;
//	}
//	
//	@Autowired
//	MemberRestController restController;
//	
//	@RequestMapping(value = "/modify", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
//	public String modify(MemberModifyCommand modifyReq, HttpSession session, RedirectAttributes rttr) throws Exception{
//		
//		String url = "redirect:/member/detail.do";
//		
//		MemberVO member = modifyReq.toMember();
//		
//		//�떊洹� �뙆�씪 蹂�寃� 諛� 湲곗〈 �뙆�씪 �궘�젣
//		String oldPicture = memberService.getMember(member.getId()).getPicture();
//		if(modifyReq.getUploadPicture() != null && !modifyReq.getUploadPicture().isEmpty()) {
//			String fileName = restController.savePicture(oldPicture, modifyReq.getPicture());
//			member.setPicture(fileName);
//		}else {
//			member.setPicture(oldPicture);
//		}
//		
//		//DB �궡�슜 �닔�젙
//		memberService.modify(member);
//		
//		// 濡쒓렇�씤�븳 �궗�슜�옄�쓽 寃쎌슦 �닔�젙�맂 �젙蹂대줈 session �뾽濡쒕뱶
//		rttr.addFlashAttribute("parentReload",false);
//		MemberVO loginUser = (MemberVO)session.getAttribute("loginUser");
//		if(loginUser!=null && member.getId().equals(loginUser.getId())) {
//			session.setAttribute("loginUser", member);
//			rttr.addFlashAttribute("parentReload", true);
//		}
//		
//		rttr.addAttribute("id", member.getId());
//		rttr.addFlashAttribute("from", "modify");
//		rttr.addFlashAttribute("member", memberService.getMember(modifyReq.getId()));
//		
//		return url;
//	}
//	
//	@Resource(name = "picturePath")
//	private String picturePath;
//	
//	@RequestMapping(value = "/remove", method = RequestMethod.GET)
//	public String remove(String id, HttpSession session, RedirectAttributes rttr) throws Exception{
//		String url = "redirect:/member/detail.do";
//		
//		MemberVO member;
//		
//		//�씠誘몄� �뙆�씪�쓣 �궘�젣
//		member = memberService.getMember(id);
//		String savePath = this.picturePath;
//		File imageFile = new File(savePath, member.getPicture());
//		if(imageFile.exists()) {
//			imageFile.delete();
//		}
//		
//		//DB�궘�젣
//		memberService.remove(id);
//		
//		//�궘�젣�릺�뒗 �쉶�썝�씠 濡쒓렇�씤 �쉶�썝�씤 寃쎌슦 濡쒓렇�븘�썐 �빐�빞�븿.
//		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
//		if(loginUser!=null && loginUser.getId().equals(member.getId())) {
//			session.invalidate();
//		}
//		
//		rttr.addFlashAttribute("removeMember", member);
//		rttr.addFlashAttribute("from", "remove");
//		
//		rttr.addAttribute("id", id);
//		
//		return url;
//	}
//	
   
   // �떆�뿕由ъ뒪�듃
   @RequestMapping(value = "/list", method = RequestMethod.GET)
	public String examList() {
		String url = "/exam/list";
		
		return url;
	}
   
   // �떆�뿕�긽�꽭(�쓳�떆)
   @RequestMapping(value = "/detail", method = RequestMethod.GET)
	public String examDetail() {
		String url = "/exam/detail";
		
		return url;
	}
   
   // 시험 결과
   @RequestMapping(value = "/result", method = RequestMethod.GET)
	public String examResult() {
		String url = "/exam/result";
		
		return url;
	}
}






















