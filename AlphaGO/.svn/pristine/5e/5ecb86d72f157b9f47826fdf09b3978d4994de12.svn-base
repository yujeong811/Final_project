package kr.or.ddit.controller.rest;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.command.Criteria;
import kr.or.ddit.command.MakeFileName;
import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.dto.ClassProgVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.dto.ProblemVO;
import kr.or.ddit.service.TeacherService;






@RestController
@RequestMapping("/rteacher")
public class RTeacherRestController {
	
	@Autowired
	private TeacherService service;
	
	
	@Resource(name = "picturePath")
	
	   private String picturePath;
	   
	   public String savePicture(String oldPicture, MultipartFile multi)throws Exception{
	      String fileName = null;
	      
	      /* 파일저장폴더설정 */
	      String uploadPath = picturePath;
	      
	      /* 파일유무확인 */
	      if(!(multi == null || multi.isEmpty() || multi.getSize() > 1024 * 1024 * 1)) {
	         fileName = MakeFileName.toUUIDFileName(multi.getOriginalFilename(), "$$");
	         File storeFile = new File(uploadPath, fileName);
	         
	         // 파일경로 생성
	         storeFile.mkdirs();
	         
	         //local HDD에 저장
	         multi.transferTo(storeFile);
	      }
	      
	      // 기존파일 삭제
	      if(oldPicture != null && !oldPicture.isEmpty()) {
	         File oldFile = new File(uploadPath, oldPicture);
	         if(oldFile.exists()) {
	            oldFile.delete();
	         }
	      }
	      return fileName;
	   }
	
	   @RequestMapping(value = "/picture", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	   public ResponseEntity<String> picture(@RequestParam("pictureFile")MultipartFile multi, String oldPicture)throws Exception{
	      
	      ResponseEntity<String> entity = null;
	      String result = "";
	      HttpStatus status = null;
	      
	      /* 파일저장확인 */
	      if((result = savePicture(oldPicture, multi)) == null) {
	         result = "업로드 실패했습니다.!";
	         status = HttpStatus.BAD_REQUEST;
	      }else {
	         status = HttpStatus.OK;
	      }
	      
	      entity = new ResponseEntity<String>(result, status);
	      return entity;
	      
	   }
	
	   
	   @RequestMapping(value = "/picture1", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	   public ResponseEntity<String> picture1(@RequestParam("pictureFile1")MultipartFile multi, String oldPicture)throws Exception{
	      
	      ResponseEntity<String> entity = null;
	      String result = "";
	      HttpStatus status = null;
	      
	      /* 파일저장확인 */
	      if((result = savePicture(oldPicture, multi)) == null) {
	         result = "업로드 실패했습니다.!";
	         status = HttpStatus.BAD_REQUEST;
	      }else {
	         status = HttpStatus.OK;
	      }
	      
	      entity = new ResponseEntity<String>(result, status);
	      return entity;
	      
	   }
	
	   @RequestMapping(value = "/picture2", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	   public ResponseEntity<String> picture2(@RequestParam("pictureFile2")MultipartFile multi, String oldPicture)throws Exception{
	      
	      ResponseEntity<String> entity = null;
	      String result = "";
	      HttpStatus status = null;
	      
	      /* 파일저장확인 */
	      if((result = savePicture(oldPicture, multi)) == null) {
	         result = "업로드 실패했습니다.!";
	         status = HttpStatus.BAD_REQUEST;
	      }else {
	         status = HttpStatus.OK;
	      }
	      
	      entity = new ResponseEntity<String>(result, status);
	      return entity;
	      
	   }
	
	   @RequestMapping(value = "/picture3", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	   public ResponseEntity<String> picture3(@RequestParam("pictureFile3")MultipartFile multi, String oldPicture)throws Exception{
	      
	      ResponseEntity<String> entity = null;
	      String result = "";
	      HttpStatus status = null;
	      
	      /* 파일저장확인 */
	      if((result = savePicture(oldPicture, multi)) == null) {
	         result = "업로드 실패했습니다.!";
	         status = HttpStatus.BAD_REQUEST;
	      }else {
	         status = HttpStatus.OK;
	      }
	      
	      entity = new ResponseEntity<String>(result, status);
	      return entity;
	      
	   }
	
	   @RequestMapping(value = "/picture4", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	   public ResponseEntity<String> picture4(@RequestParam("pictureFile4")MultipartFile multi, String oldPicture)throws Exception{
	      
	      ResponseEntity<String> entity = null;
	      String result = "";
	      HttpStatus status = null;
	      
	      /* 파일저장확인 */
	      if((result = savePicture(oldPicture, multi)) == null) {
	         result = "업로드 실패했습니다.!";
	         status = HttpStatus.BAD_REQUEST;
	      }else {
	         status = HttpStatus.OK;
	      }
	      
	      entity = new ResponseEntity<String>(result, status);
	      return entity;
	      
	   }
	
	   
	   
	   @RequestMapping(value = "/getProPicture", produces = "text/plain;charset=utf-8")
		public ResponseEntity<byte[]> getProPicture(int problemCode) throws Exception {

			int  prCode= problemCode;
			ProblemVO problem=(ProblemVO)service.getProblem(problemCode).get("problem");
			
			String picture=problem.getPicture();
			System.out.println(picture);
			InputStream in = null;
			ResponseEntity<byte[]> entity = null;
			String imgPath = this.picturePath;
			System.out.println("여기는rteacher컨트롤");
			try {
				in = new FileInputStream(new File(imgPath, picture));

				entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in), 
							HttpStatus.CREATED);

			} finally {
				if(in!=null)in.close();
			}
			return entity;
		}
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	
	
	@RequestMapping(value ="pslist", method=RequestMethod.GET)
	public ResponseEntity<Map<String,Object>> res(HttpServletRequest request) throws Exception{
		System.out.println("여긴왔다");
	   String mm=request.getParameter("searchtype");
	   String ms=request.getParameter("processname");
	   SearchCriteria cri=new  SearchCriteria();
	   cri.setKeyword(request.getParameter("keyword"));
	   try {
		   int page= Integer.parseInt(request.getParameter("page"));
	   }catch(Exception e) {
		   return null;
	   }
	    
	   cri.setPage(Integer.parseInt(request.getParameter("page")));
	   cri.setSearchType(mm);
		System.out.println(mm);
		System.out.println(ms);
		System.out.println(cri.getPage());
		System.out.println(cri.getKeyword());
		//System.out.println(page);
		ResponseEntity<Map<String, Object>> entity = null;

		Map<String,  Object> dataMap = service.processStudentList(ms,cri);
	       System.out.println(dataMap.get("processStudentList"));
	       
		entity = new ResponseEntity<Map<String,Object>>(dataMap, HttpStatus.OK);
		
	//	return entity;
		return entity;
	}
	
	
	
	
	
	@RequestMapping(value ="piddetail", method=RequestMethod.GET)
	public ResponseEntity<Map<String,Object>> piddetail(HttpServletRequest request) throws Exception{
		System.out.println("여긴왔다");
	    String id=request.getParameter("id");
	    MemberVO member=service.teacherstudentDetail(id);
		//System.out.println(page);
		ResponseEntity<Map<String, Object>> entity = null;
       Map<String,Object>dataMap=new HashMap<String,Object>();
       dataMap.put("student",member);
       System.out.println("===========================");
        System.out.println(member.getRegDate()); 
        System.out.println("===========================");
		entity = new ResponseEntity<Map<String,Object>>(dataMap, HttpStatus.OK);
		
		return entity;
	//	return null;
	}
	
	
	@RequestMapping(value ="schoolgrade", method=RequestMethod.GET)
	public ResponseEntity<Map<String,Object>> schoolgrade(HttpServletRequest request) throws Exception{
	
	    String id=request.getParameter("id");
	   // MemberVO member=service.teacherstudentDetail(id);
		//System.out.println(page);
		ResponseEntity<Map<String, Object>> entity = null;
       Map<String,Object>dataMap=new HashMap<String,Object>();
     //  dataMap.put("student",member);
          dataMap.put("schoolScoreList",service.schoolGrade(id));
      //  System.out.println(member.getRegDate()); 
   
		entity = new ResponseEntity<Map<String,Object>>(dataMap, HttpStatus.OK);
		
		return entity;
	//	return null;
	}
	
	@RequestMapping(value ="dsubjectSearch", method=RequestMethod.GET)
	public ResponseEntity<List<ClassProgVO>> dsubjectSearch(HttpServletRequest request,String name) throws Exception{
	

		ResponseEntity<List<ClassProgVO>> entity = null;
		
       List<ClassProgVO>danList=service.danSearch(name);
        ClassProgVO pr=new ClassProgVO();
        pr.setSubdetailCode(1);
        pr.setSubjectProccess(2);
        pr.setSubunitName("수학 노잼");
       danList.add(pr);
       
		entity = new ResponseEntity<List<ClassProgVO>>(danList, HttpStatus.OK);
		
		return entity;
	//	return null;
	}
	
	
	
	
}
