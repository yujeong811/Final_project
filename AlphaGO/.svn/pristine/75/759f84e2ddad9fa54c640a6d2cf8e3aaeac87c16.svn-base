package kr.or.ddit.controller.view;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.dto.AcademyScoreVO;
import kr.or.ddit.dto.ExamVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.dto.ProblemVO;
import kr.or.ddit.service.ClassService;
import kr.or.ddit.service.ExamService;

@Controller
@RequestMapping("/exam")
public class ExamController {
   
   @Autowired
   private ExamService examService;
   
   @Autowired
   private ClassService classService;
   
   @RequestMapping("/main")
   public void main() {}
   
   
   /**
    * 수강중인 수업 리스트
    * @param session
    * @param model
    * @return
    */
   @RequestMapping(value = "/list")
	public String examList(HttpSession session, Model model) {
		String url = "/exam/list";
		
		Map<String, Object> dataMap = null;
		List<ExamVO> examList = null;
		
		MemberVO member = (MemberVO) session.getAttribute("loginUser");

		String id = member.getId();

		try {
			dataMap = classService.getClassing(id);
			examList = examService.getExam(id);
			
			dataMap.put("examList", examList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		model.addAttribute("dataMap", dataMap);
		return url;
	}
   
   /**
    * 수업 선택 후 시험 리스트
    * @param session
    * @param name
    * @return
    * @throws SQLException
    */
    @ResponseBody
	@RequestMapping("/examlist")
	public ResponseEntity<List<ExamVO>> examNameList(HttpSession session, String name) throws SQLException {
		ResponseEntity<List<ExamVO>> entity = null;
		List<ExamVO> examNameList = null;
		Map<String, Object> map = new HashMap<String, Object>();
		
		MemberVO member = (MemberVO) session.getAttribute("loginUser");

		String id = member.getId();

		map.put("className", name);
		map.put("id", id);

		examNameList = examService.selectExamList(map);

		entity = new ResponseEntity<List<ExamVO>>(examNameList, HttpStatus.OK);

		return entity;
	}
   
   /**
    * 지문 유무 체크후 페이지 자르기
    * @param model
    * @param session
    * @param examCode
    * @return
    */
   @RequestMapping(value = "/detail")
	public String examDetail(Model model, HttpSession session, int examCode) {
		String url = "/exam/detail";
		
		List<ProblemVO> problemList = null;
		try {
			problemList = examService.getExamProblem(examCode);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		List<Map<String, Object>> pageInfo = new ArrayList<Map<String,Object>>();	
		
		int i=0;
		
		while (true) {
			try {
				if (examService.getJimoon(problemList.get(i).getProblemCode()) != null) {
					Map<String,Object> data = new HashMap<String,Object>();// 지문 있음
					if (i + 2 > problemList.size()) {
						data.put("startNum", i);
						data.put("endNum", problemList.size());

						pageInfo.add(data);

						i = problemList.size();
					} else {
						data.put("startNum", i);
						data.put("endNum", i + 1);

						pageInfo.add(data);

						i = i + 2;
					}
				} else {
					Map<String,Object> data = new HashMap<String,Object>();	
					if (i + 4 > problemList.size()) {
						data.put("startNum", i);
						data.put("endNum", problemList.size());

						pageInfo.add(data);

						i = problemList.size();
					} else {
						data.put("startNum", i);
						data.put("endNum", i + 3);

						pageInfo.add(data);

						i = i + 4;
					}

					if (i == problemList.size()) {
						break;
					}
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

//		System.out.println(pageInfo);
		model.addAttribute("pageInfo", pageInfo);
		model.addAttribute("problem", problemList);
		
		return url;
	}
   
   
   @RequestMapping(value = "/result", method = RequestMethod.GET)
	public String examResult() {
		String url = "/exam/result";
		
		return url;
	}

   /**
    * 시험점수 채점
    * @param request
    * @param examCode
    * @param problem
    * @return
    */
   @RequestMapping(value = "/check", method = RequestMethod.POST)
   public String check(HttpServletRequest request, int examCode, HttpSession session, int problem) {
	   String url = "/exam/result";

	   List<String> answerList = new ArrayList<String>();
	   
	   MemberVO member = (MemberVO) session.getAttribute("loginUser");

	   String id = member.getId();	
	   
	   for(int i = 1;  i <= problem; i++) {
		   String answerKey = "select" + i;
		   String zooKey = "zoo" + i;
		   String answer = request.getParameter(answerKey);
		   if(answer == null) {
			   answer = request.getParameter(zooKey);
		   }
		   
		   answerList.add(answer);
	   }
	  
	   String ans = "";
	   int score = 0;
	   try {
		   for(int i = 0; i < problem; i++) {
			   ans = examService.getExamProblem(examCode).get(i).getProblemAnswer();	

			   if(ans.equals(answerList.get(i))) {
				   score += 100 / problem;
			   }
		   }
		   
		   AcademyScoreVO acaVO = new AcademyScoreVO();
		   AcademyScoreVO gradeVO = new AcademyScoreVO();
		   acaVO.setExamCode(examCode);
		   acaVO.setAcademyScore(score);
		   acaVO.setId(id);		  
		   
		   int asCode = examService.selectSeq(); // 시퀀스 값 불러오기
		   acaVO.setAscode(asCode);
		   
		   examService.insertScore(acaVO);
		   
		   gradeVO.setAscode(asCode);
		   if(acaVO.getAcademyScore() >= 80) {
			   gradeVO.setAchievement("A");
		   } else if(acaVO.getAcademyScore() >= 70) {
			   gradeVO.setAchievement("B");
		   } else {
			   gradeVO.setAchievement("C");
		   }
		   
		   examService.updateGrade(gradeVO);
		   
	   } catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	   }

	   
	   return url;
   }
}
