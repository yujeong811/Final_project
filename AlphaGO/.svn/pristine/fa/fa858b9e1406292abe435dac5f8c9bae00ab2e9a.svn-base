package kr.or.ddit.controller.view;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.command.QRMaker;
import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.dto.FavoritesVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.dto.NoticeVO;
import kr.or.ddit.dto.PdsVO;
import kr.or.ddit.dto.StudyPlanVO;
import kr.or.ddit.dto.StudyPlanerVO;
import kr.or.ddit.service.FavoritesService;
import kr.or.ddit.service.MemberService;
import kr.or.ddit.service.NoticeService;
import kr.or.ddit.service.PdsService;
import kr.or.ddit.service.StudyPlanService;

@Controller
@RequestMapping("/member")
public class MemberController {


	@Autowired
	private MemberService memberService;

//   @Autowired
//   private ExceptionLoggerHelper exceptionLogger;

	@Autowired
	private FavoritesService favoritesService;

	@Autowired
	private PdsService pdsService;

	@Autowired
	private NoticeService noticeService;

	@Autowired
	private StudyPlanService studyPlanService;

	private static final Logger logger = LoggerFactory.getLogger(MemberController.class);

	@RequestMapping("/home")
	public String main(HttpSession session, Model model) throws Exception {
		String url = "member/main";

		MemberVO member = (MemberVO) session.getAttribute("loginUser");
		if(member == null) {
			//로그인 session 정보가 없을 때
			url = "redirect:/common/loginTimeOut";
			logger.info("loginMember 정보가 없음");
			return url;
		}

		String id = member.getId();

		//즐겨찾기
		List<FavoritesVO> favList = favoritesService.getFavoritesListById(id);
		List<Map<String, Object>> likeData = pdsService.getLikePdsList(favList);

		model.addAttribute("likeData", likeData);

		// 최근 공지사항
		List<NoticeVO> noticeAllList = noticeService.getNoticeList();
		List<NoticeVO> noticeList = new ArrayList<NoticeVO>();
		if(noticeAllList != null) {
			for(int i = 0; i < 5; i++) {	//5개
				noticeList.add(noticeAllList.get(i));
			}
		}
		model.addAttribute("noticeList", noticeList);

		// 학습계획표
		LocalDate now = LocalDate.now();
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy.MM.dd");
		String date = now.format(formatter);

		int spCode = studyPlanService.getSpCode(date, member.getId());
		List<StudyPlanVO> planList = studyPlanService.getPlanList(spCode);

		model.addAttribute("planList", planList);

		//QR 출석체크
		DateTimeFormatter QRformatter = DateTimeFormatter.ofPattern("yyyyMMdd");
		String QRdate = now.format(QRformatter);

		String fileName = QRdate + "-" + id +".png";
		String filePath = "/Temp/" + fileName;

		QRMaker.make(filePath, "http://" + InetAddress.getLocalHost().getHostAddress() + "/ddit/attendQR?id=" + id +"&date=" + QRdate);

		String qrUrl = "/getQR.go?fileName=" + fileName;
		model.addAttribute("qrUrl", qrUrl);


		return url;
	}

	@RequestMapping("/list")
	public ModelAndView list(SearchCriteria cri, HttpServletRequest request, ModelAndView mnv) throws SQLException {
		String url = "member/list";

		Map<String, Object> dataMap = null;

		try {
			dataMap = memberService.getMemberListForPage(cri);
		}

		catch (Exception e) {
			e.printStackTrace();
		}

		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);

		return mnv;
	}





	@RequestMapping("/getQR")
	@ResponseBody
	public ResponseEntity<byte[]> getQR(String fileName) throws Exception{
		ResponseEntity<byte[]> entity = null;


		String savePath = "/Temp/" .replace("/", File.separator);
		File sendFile = new File(savePath, fileName);

		InputStream in = null;

		try {
			in = new FileInputStream(sendFile);
			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in), HttpStatus.CREATED);
		} catch (IOException e) {
			e.printStackTrace();
			entity = new ResponseEntity<byte[]>(HttpStatus.INTERNAL_SERVER_ERROR);
		} finally {
			if(in != null)
				try {
					in.close();
				}catch (IOException e) {
					e.printStackTrace();
					entity = new ResponseEntity<byte[]>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
		}

		return entity;
	}














//   @RequestMapping(value = "/registForm", method = RequestMethod.GET)
//   public String registForm() {
//      String url = "member/regist";
//      return url;
//   }
//
//	@RequestMapping(value="/regist", method=RequestMethod.POST)
//	public String regist(MemberRegistCommand memberReq) throws Exception{
//		String url = "member/regist_success";
//
//		MemberVO member = memberReq.toMemberVO();
//		memberService.regist(member);
//
//		return url;
//	}
//
//	@RequestMapping(value = "/detail", method = RequestMethod.GET)
//	public String detail(String id, Model model) throws Exception{
//		String url = "member/detail";
//
//		MemberVO member = memberService.getMember(id);
//		model.addAttribute("member", member);
//
//		return url;
//	}
//
//	@RequestMapping(value = "/modifyForm", method = RequestMethod.GET)
//	public String modifyForm(String id, Model model) throws Exception{
//		String url = "member/modify";
//
//		MemberVO member = memberService.getMember(id);
//
//		String picture = MakeFileName.parseFileNameFromUUID(member.getPicture(), "\\$\\$");
//		member.setPicture(picture);
//
//		model.addAttribute("member", member);
//
//		return url;
//	}
//
//	@Autowired
//	MemberRestController restController;
//
//	@RequestMapping(value = "/modify", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
//	public String modify(MemberModifyCommand modifyReq, HttpSession session, RedirectAttributes rttr) throws Exception{
//
//		String url = "redirect:/member/detail.do";
//
//		MemberVO member = modifyReq.toMember();
//
//		//신규 파일 변경 및 기존 파일 삭제
//		String oldPicture = memberService.getMember(member.getId()).getPicture();
//		if(modifyReq.getUploadPicture() != null && !modifyReq.getUploadPicture().isEmpty()) {
//			String fileName = restController.savePicture(oldPicture, modifyReq.getPicture());
//			member.setPicture(fileName);
//		}else {
//			member.setPicture(oldPicture);
//		}
//
//		//DB 내용 수정
//		memberService.modify(member);
//
//		// 로그인한 사용자의 경우 수정된 정보로 session 업로드
//		rttr.addFlashAttribute("parentReload",false);
//		MemberVO loginUser = (MemberVO)session.getAttribute("loginUser");
//		if(loginUser!=null && member.getId().equals(loginUser.getId())) {
//			session.setAttribute("loginUser", member);
//			rttr.addFlashAttribute("parentReload", true);
//		}
//
//		rttr.addAttribute("id", member.getId());
//		rttr.addFlashAttribute("from", "modify");
//		rttr.addFlashAttribute("member", memberService.getMember(modifyReq.getId()));
//
//		return url;
//	}
//
//	@Resource(name = "picturePath")
//	private String picturePath;
//
//	@RequestMapping(value = "/remove", method = RequestMethod.GET)
//	public String remove(String id, HttpSession session, RedirectAttributes rttr) throws Exception{
//		String url = "redirect:/member/detail.do";
//
//		MemberVO member;
//
//		//이미지 파일을 삭제
//		member = memberService.getMember(id);
//		String savePath = this.picturePath;
//		File imageFile = new File(savePath, member.getPicture());
//		if(imageFile.exists()) {
//			imageFile.delete();
//		}
//
//		//DB삭제
//		memberService.remove(id);
//
//		//삭제되는 회원이 로그인 회원인 경우 로그아웃 해야함.
//		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
//		if(loginUser!=null && loginUser.getId().equals(member.getId())) {
//			session.invalidate();
//		}
//
//		rttr.addFlashAttribute("removeMember", member);
//		rttr.addFlashAttribute("from", "remove");
//
//		rttr.addAttribute("id", id);
//
//		return url;
//	}
//

	// 회원정보 비밀번호 입력창
	@RequestMapping(value = "/detailPass", method = RequestMethod.GET)
	public String infoPass() {
		String url = "/member/detailPass";

		return url;
	}

	// 회원정보 상세
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public String info() {
		String url = "/member/detail";

		return url;
	}

	// 회원정보 수정
	@RequestMapping(value = "/modify", method = RequestMethod.GET)
	public String infoModify() {
		String url = "/member/modify";

		return url;
	}



}
