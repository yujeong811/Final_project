package kr.or.ddit.controller.view;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.command.RoomCommand;
import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.dto.ClassVO;
import kr.or.ddit.dto.ClassroomVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.dto.SubjectVO;
import kr.or.ddit.dto.UseRoomVO;
import kr.or.ddit.service.ClassService;
import kr.or.ddit.service.ClassroomService;

@Controller
@RequestMapping("/master")
public class DJ_MasterController {

	@RequestMapping("/main")
	public void main() {}
	
	@RequestMapping("/home")
	public String home() {
		String url = "master/home";
		
		return url;
	}

	@Autowired
	ClassroomService classroomService;
	@Autowired
	ClassService classService;
	
	@RequestMapping("/classroom")
	public String classroom(SearchCriteria cri, Model model) throws Exception{
		String url = "master/classroom";

		Map<String, Object> dataMap = classroomService.getAllClassroom(cri);
		
		model.addAttribute("dataMap", dataMap);
		
		return url;
	}

	@RequestMapping("/roomregist")
	public String classRegist(@RequestParam Map<String, Object> map,RedirectAttributes rttr) throws Exception{
		String url = "redirect:/master/classroom.go";
		
		RoomCommand roomCommand = new RoomCommand();
		String floor = ((String)map.get("roomNo")).substring(0, 1);
		
		String fx1 = (String)map.get("fx1");
		String fx2 = (String)map.get("fx2");
		String fx3 = (String)map.get("fx3");
		String fx4 = (String)map.get("fx4");
		String fx5 = (String)map.get("fx5");
		String fx6 = (String)map.get("fx6");
		
		if(fx1!=null||fx1!="") {
			roomCommand.setFx1(fx1);
		}
		if(fx2!=null||fx2!="") {
			roomCommand.setFx2(fx2);
		}
		if(fx3!=null||fx3!="") {
			roomCommand.setFx3(fx3);
		}
		if(fx4!=null||fx4!="") {
			roomCommand.setFx4(fx4);
		}
		if(fx5!=null||fx5!="") {
			roomCommand.setFx5(fx5);	
		}
		if(fx6!=null||fx6!="") {
			roomCommand.setFx6(fx6);
		}
		roomCommand.setRoomFloor(floor);
		roomCommand.setRoomNo((String)map.get("roomNo"));
		roomCommand.setUsePurpose((String)map.get("usePurpose"));
		roomCommand.setCapacity((String)map.get("capacity"));

		classroomService.registClassroom(roomCommand);
		rttr.addFlashAttribute("from", "regist");
		
		return url;
	}
	@RequestMapping("/classRemove")
	public String removeClassroom(@RequestParam Map<String, Object> map, RedirectAttributes rttr) throws Exception{
		String url = "redirect:/master/classroom.go";
		
		String roomCode = (String)map.get("room_code");
		
		int rcode=Integer.parseInt(roomCode);
		
		classroomService.removeClassroom(rcode);
		
		rttr.addFlashAttribute("from", "remove");
		
		return url;
	}
	

	@RequestMapping("/classmanage")
	public String classmanage(SearchCriteria cri, Model model) throws Exception{
		String url = "master/classmanage";
		
		Map<String, Object> dataMap = null;
		try {
			cri.setPerPageNum(5);
			dataMap = classService.getSearchClassList(cri);
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		
		model.addAttribute("dataMap", dataMap);
		
		return url;
	}
	
	@ResponseBody
	@RequestMapping(value = "/classDetail", method = RequestMethod.POST)
	public ResponseEntity<Map<String, Object>> getClassDetail(String classCode){
		ResponseEntity<Map<String, Object>> entity = null;
		
		int classcode = Integer.parseInt(classCode);
		
		try {
			Map<String, Object> classDetail = classService.getClassDetail(classcode);
			
			entity = new ResponseEntity<Map<String, Object>>(classDetail, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	@ResponseBody
	@RequestMapping(value = "/subDetail", method = RequestMethod.POST)
	public ResponseEntity<List<SubjectVO>> getSubDetail(int opVal){
		ResponseEntity<List<SubjectVO>> entity = null;
		System.out.println(opVal);
//		int subdetailcode = Integer.parseInt(subcode);
		
		try {
			List<SubjectVO> subList = classService.getSubDetail(opVal);
			
			entity = new ResponseEntity<List<SubjectVO>>(subList, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<List<SubjectVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}

	@RequestMapping("/classregistGo")
	public String classregist(ClassVO classVO, RedirectAttributes rttr) throws Exception{
		String url = "redirect:/master/classmanage.go";
//		System.out.println(classVO);
		classService.registClass(classVO);
		
		rttr.addFlashAttribute("from", "regist");
		
		return url;
	}
	
	@RequestMapping("/classregist")
	public String classRegistPage(SearchCriteria cri, Model model) throws Exception{
		String url = "master/classregist";
		
		Map<String, Object> dataMap = null;
		try {
			cri.setPerPageNum(5);
			dataMap = classService.getClassRegElementList(cri);
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		model.addAttribute("dataMap", dataMap);
		
		return url;
	}

	@RequestMapping("/classremove")
	public String classremove(ClassVO classVO, RedirectAttributes rttr){
		String url = "redirect:/master/classmanage.go";
		try {
			classService.removeClass(classVO);
			rttr.addFlashAttribute("from", "removeSuccess");
		} catch (Exception e) {
			e.printStackTrace();
			rttr.addFlashAttribute("from", "removeFail");
		}
		return url;
	}
	
	@ResponseBody
	@RequestMapping("/getTeacherList")
	public ResponseEntity<List<MemberVO>> getTeacherList(String subjectName) {
		ResponseEntity<List<MemberVO>> entity = null;
		List<MemberVO> teacherList = null;
		try {
			teacherList = classService.getTeacherList(subjectName);
			entity = new ResponseEntity<List<MemberVO>>(teacherList, HttpStatus.OK); 
			
		} catch (Exception e) {
			entity = new ResponseEntity<List<MemberVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
	@ResponseBody
	@RequestMapping("/getTeacherDetail")
	public ResponseEntity<Map<String, Object>> getTeacherDetail(String id){
		ResponseEntity<Map<String, Object>> entity = null;
		Map<String, Object> dataMap = null;
		
		try {
			dataMap = classService.getTeacherDetail(id);
			entity = new ResponseEntity<Map<String,Object>>(dataMap, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<Map<String,Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
	@ResponseBody
	@RequestMapping("/getUseRoomTime")	
	public ResponseEntity<List<UseRoomVO>> getUseRoomList(String roomCode){
		ResponseEntity<List<UseRoomVO>> entity = null;
		List<UseRoomVO> list = null;
		
		try {
			list = classService.getUseRoomList(roomCode);
			entity = new ResponseEntity<List<UseRoomVO>>(list, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<List<UseRoomVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
	@ResponseBody
	@RequestMapping("/oneClassroom")
	public ResponseEntity<ClassroomVO> getClassroom(String roomCode){
		ResponseEntity<ClassroomVO> entity = null;
		ClassroomVO room = null;
		try {
			room = classroomService.getOneClassroom(roomCode);
			entity = new ResponseEntity<ClassroomVO>(room, HttpStatus.OK);
			
		} catch (Exception e) {
			entity = new ResponseEntity<ClassroomVO>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
	//수업 개설 ajax를 받는 비동기 컨트롤러이다
	@ResponseBody
	@RequestMapping(value="/classOpen",method=RequestMethod.POST, produces = "application/json;charset=utf-8")
	public ResponseEntity<Integer> classOpen(@RequestBody Map<String,Object> map){
		ResponseEntity<Integer> entity = null;
		System.out.println(map);
		int res = 0;
		try {
			res = classService.updateClassOpen(map);
			entity = new ResponseEntity<Integer>(res, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<Integer>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
	@RequestMapping("/classlist")
	public String classList() {
		String url = "master/classList";
		
		return url;
	}

	@RequestMapping("/schoollist")
	public String schoolList() {
		String url = "master/schoolList";
		
		return url;
	}
	
}
