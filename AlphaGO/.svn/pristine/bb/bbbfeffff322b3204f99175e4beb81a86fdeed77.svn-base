package kr.or.ddit.dao;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;




import kr.or.ddit.command.Criteria;
import kr.or.ddit.command.ProblemSearchCommand;
import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.dto.ClassProgVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.dto.ProblemVO;
import kr.or.ddit.dto.School_scoreVO;

public class TeacherDAOImpl implements TeacherDAO{
	   private SqlSession session;
	    
	     public void setSession(SqlSession session) {
			this.session = session;
		}
	     
	     //id로 과정검색
		@Override
		public List<String> processSearch(String id)throws SQLException{
			List<String>processList=null;
			processList=session.selectList("Teacher-Mapper.processSearch",id);
			return processList;
		}

		
		//강의코드로 학생 리스트 가져오기
		@Override
		public List<MemberVO> processStudentList(String processName,Criteria cri) throws SQLException {
			List<MemberVO>processStudentlist=null;
			int classCode=-1;
			
				//강의명으로 강의 코드 가져오기
		     classCode=classCode(processName);
		     
		     int startRow = cri.getStartRowNum();
				int endRow = startRow+cri.getPerPageNum()-1;

				SearchCriteria searchCri = (SearchCriteria)cri;
				
				Map<String, Object> dataParam = new HashMap<String, Object>();
				dataParam.put("startRow", startRow);
				dataParam.put("endRow", endRow);
				dataParam.put("searchType", searchCri.getSearchType());
				dataParam.put("keyword", searchCri.getKeyword());
				dataParam.put("classCode",classCode);
				
			 
			  
				processStudentlist=session.selectList("Teacher-Mapper.processStudentlist",dataParam);
			
			return processStudentlist;
		}

	
		//강의코드로 학생수 조회하기
		@Override
		public int selectprocessStudentlistCount(int class_code,Criteria cri) {
		
		     int startRow = cri.getStartRowNum();
				int endRow = startRow+cri.getPerPageNum()-1;

				SearchCriteria searchCri = (SearchCriteria)cri;
				
				Map<String, Object> dataParam = new HashMap<String, Object>();
				dataParam.put("startRow", startRow);
				dataParam.put("endRow", endRow);
			
				dataParam.put("searchType", searchCri.getSearchType());
				dataParam.put("keyword", searchCri.getKeyword());
				dataParam.put("classCode",class_code);
		System.out.println(dataParam);
			return session.selectOne("Teacher-Mapper.processStudentlistCount",dataParam);
		}
	    
		
		//학생 아이디를 통한 학생 상세 조회
		@Override
		public MemberVO teacherstudentDetail(String id) throws SQLException {
			
			return session.selectOne("Teacher-Mapper.teacherstudentDetail",id);
		}
		
		//강의 이름으로 강의 코드찾기
		@Override
		public int classCode(String processName) throws SQLException {
			System.out.println(processName);
			
			return  session.selectOne("Teacher-Mapper.classCode",processName);
		}

		//로그인한 선생님의 강의 리스트
		@Override
		public List<String> searchClass(String id) {
			
			return session.selectList("Teacher-Mapper.searchClass",id);
		}
		
		//선생님 강의듣는 학생 리스트 
		@Override
		public List<MemberVO> teacherstudenttotalList(String id,SearchCriteria cri) throws SQLException {
			 int startRow = cri.getStartRowNum();
				int endRow = startRow+cri.getPerPageNum()-1;

				SearchCriteria searchCri = (SearchCriteria)cri;
				
				Map<String, Object> dataParam = new HashMap<String, Object>();
				dataParam.put("startRow", startRow);
				dataParam.put("endRow", endRow);
				dataParam.put("searchType", searchCri.getSearchType());
				dataParam.put("keyword", searchCri.getKeyword());
				dataParam.put("id",id);
			
			return session.selectList("Teacher-Mapper.teacherstudenttotalList",dataParam);
		}

		//선생님 강의듣는 학생 리스트 수세기
		@Override
		public int teacherstudenttotalListcount(String id, SearchCriteria cri) throws SQLException {
			   int startRow = cri.getStartRowNum();
				int endRow = startRow+cri.getPerPageNum()-1;

				
				Map<String, Object> dataParam = new HashMap<String, Object>();
				dataParam.put("startRow", startRow);
				dataParam.put("endRow", endRow);
			
				dataParam.put("searchType", cri.getSearchType());
				dataParam.put("keyword", cri.getKeyword());
				
				dataParam.put("id",id);
				System.out.println(dataParam);
				if(session.selectOne("Teacher-Mapper.teacherstudenttotalListcount",dataParam)==null) {
					return 0;
				}
				return session.selectOne("Teacher-Mapper.teacherstudenttotalListcount",dataParam); 
		}

		//id로 이름검색
		@Override
		public String idSearchName(String id) throws SQLException {
			// TODO Auto-generated method stub
			return session.selectOne("Teacher-Mapper.idSearchName", id);
		}
		
		//id로 과목검색
		@Override
		public String idSearchSubject(String id) throws SQLException {
			
			return session.selectOne("Teacher-Mapper.idSearchSubject",id);
		}
		
		//학교 성적 불러오기
		@Override
		public List<School_scoreVO> schoolGrade(String id) throws SQLException {
			List<School_scoreVO>scoreList=session.selectList("Teacher-Mapper.schoolGrage", id);
			return scoreList;
		}
		
		//아이디로 과목코드 불러오기
		@Override
		public String idSearchSubjectCode(String id) throws SQLException {
			String subject=idSearchSubject(id);
			String subjectCode=session.selectOne("Teacher-Mapper.idSearchSubjectCode",subject);
			return subjectCode;
		}
		
		
		//과목코드로 세부과목 이름,코드 가지고 오기
		@Override
		public List<Map<String,Object>> subjectCodeSearchDetailName(String subjectCode) throws SQLException {
			List<Map<String,Object>>subjectDetailList=session.selectList("Teacher-Mapper.subjectCodeSearchDetailName",subjectCode);
			return subjectDetailList;
		}
		
		//세부과목코드로 유형및 유형코드 검색
		@Override
		public List<Map<String,String>> detailCodeSearchSarea(String subcode) throws SQLException {
		        List<Map<String,String>>subAreaList=session.selectList("Teacher-Mapper.detailCodeSearchSarea",subcode);
			return subAreaList;
		}
		
		
		//단원을 세부과목 코드로 검색
		@Override
		public List<ClassProgVO> danSearch(String name) throws SQLException {
			// TODO Auto-generated method stub
			return session.selectList("Teacher-Mapper.danSearch", name);
		}

		//문제를 등록할 때 쓰는 메서드
		@Override
		public int insertProblem(ProblemVO problem) throws SQLException {
			
			return session.insert("Teacher-Mapper.insertProblem",problem);
		}

		@Override
		public int problemSequence() throws SQLException {
			
			return session.selectOne("Teacher-Mapper.selectProblemSeqNext");
		}

		@Override
		public int jimoonSequece() throws SQLException {
			// TODO Auto-generated method stub
			return session.selectOne("Teacher-Mapper.jimoonSequeceNext");
		}

		@Override
		public int insertjimoonProblem(int jimoonNum, int proC1, String problemPrint) throws SQLException {
			Map<String,Object>dataMap=new HashMap<String,Object>();
			dataMap.put("proC1",proC1);
			dataMap.put("problemPrint",problemPrint);
			dataMap.put("jimoonNum",jimoonNum);
			
			return session.insert("Teacher-Mapper.insertjimoonProblem",dataMap);
		}

		@Override
		public List<ProblemVO> problemPXList(ProblemSearchCommand cri, String subject) throws SQLException {
			Map<String,Object>dataParam=new HashMap<String,Object>();
			 int startRow = cri.getStartRowNum();
			int endRow = startRow+cri.getPerPageNum()-1;
			
			dataParam.put("startRow", startRow);
			dataParam.put("endRow", endRow);
		
			dataParam.put("searchType", cri.getSearchType());
			dataParam.put("keyword", cri.getKeyword());
			dataParam.put("subject",subject);
			System.out.println("dataParam"+dataParam);
			return session.selectList("Teacher-Mapper.problemPXList",dataParam); 
		}

		@Override
		public int PXtotalcnt(ProblemSearchCommand cri, String subject) throws SQLException {
			Map<String,Object>dataParam=new HashMap<String,Object>();
			 int startRow = cri.getStartRowNum();
			int endRow = startRow+cri.getPerPageNum()-1;
			
			dataParam.put("startRow", startRow);
			dataParam.put("endRow", endRow);
			
			dataParam.put("searchType", cri.getSearchType());
			dataParam.put("keyword", cri.getKeyword());
			dataParam.put("subject",subject);
			return session.selectOne("Teacher-Mapper.PXtotalcnt",dataParam);
		}
		
		//문제가져오기
		@Override
		public ProblemVO getProblem(int prC) throws SQLException {
			
			return session.selectOne("Teacher-Mapper.getProblem", prC);
		}
		
		//문제에 지문있음 가져오기
		@Override
		public String getJimoon(int prC) throws SQLException {
			// TODO Auto-generated method stub
			return session.selectOne("Teacher-Mapper.getJimoon",prC);
		}
		
		
}
